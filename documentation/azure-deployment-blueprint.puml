@startuml
!pragma revision 1
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define AzurePuml https://raw.githubusercontent.com/RicardoNiepel/Azure-PlantUML/master/dist

!includeurl AzurePuml/AzureCommon.puml
' !includeurl AzurePuml/AzureSimplified.puml
!includeurl AzurePuml/AzureC4Integration.puml

!includeurl AzurePuml/Containers/all.puml
!includeurl AzurePuml/Databases/AzureCosmosDb.puml
!includeurl AzurePuml/Databases/AzureRedisCache.puml
!includeurl AzurePuml/General/Azure.puml
!includeurl AzurePuml/Integration/AzureServiceBus.puml
!includeurl AzurePuml/Management/all.puml
!includeurl AzurePuml/Networking/all.puml
!includeurl AzurePuml/Compute/AzureFunction.puml
!includeurl AzurePuml/Compute/AzureVirtualMachine.puml
!includeurl AzurePuml/Security/AzureKeyVault.puml

' LAYOUT_LEFT_RIGHT
LAYOUT_WITH_LEGEND()

System_Ext(111, "111 Provider", "1 of many 111 Providers")
System_Ext(labs, "Laboratories", "1 of many Laboratories")

Azure(azure, "Azure", "Cloud") {
    AzureSubscription(azPTL, "PTL Subscription", "") {
        AzureVirtualNetwork(ptlvn, "PTL VNET", "") {
        }
        
    }
    AzureSubscription(azGP, "GP Supplier Subscription", "") {
        AzureVirtualNetwork(gpvn, "GP VNET", "") {
            System_Ext(gp, "GP Supplier", "GP Supplier Software")
            note bottom of gp
                Supplier software modelled
                here outside of Azure
        end note
        }
    }
    AzureSubscription(az, "Adaptors Subscription", "") {
        AzureVirtualNetwork(avn, "NIA Adaptors VNET", "Peered with NIA OpenTest VNET") {
            rectangle "AKS subnet" {
                AzureKubernetesService(aks, "Adaptors", "k8s cluster") {
                    AzureContainerInstance(ingress, "Ingress controller", "nginx", "nia/outbound\nnia/inbound\nnia/111")
                    AzureContainerInstance(outbound, "MHS Outbound", "Python", "GP Facing API")
                    AzureContainerInstance(sds, "MHS Spine Route Lookup", "Python")
                    AzureContainerInstance(inbound, "MHS Inbound", "Python", "API for Spine callback")
                    AzureContainerInstance(pem, "111 PEM", "Java", "111 PEM Adaptor")
                    AzureContainerInstance(redis, "MHS Spine Route Lookup Cache", "Cached Spine Route Lookup route and reliability information")
                    AzureContainerInstance(nhais, "NHAIS", "Java", "FHIR API for outbound transactions")
                    AzureContainerInstance(labResults, "Lab Results", "Java", "Pathology/Screening results adaptor")
                }
            }
        }
        note left of avn
            Could be deployed into 
            the same VNET as the
            GP Supplier systems
        end note
       note bottom of outbound
            Outbound can use Spine Route Lookup that does a direct LDAP call
            or use SDS API
        end note
        AzureCosmosDb(cosmos, "MHS State Db\nNHAIS Sequence Numbers\nNHAIS Inbound state\nNHAIS Outbound state", "MongoDb")
        AzureServiceBus(asb, "MHS Inbound Queue", "Consumed by GP System")
        rectangle "NHAIS Queues" {
            AzureServiceBus(nhaisOutboundQueue, "NHAIS Outbound Queue", "Internal to Adaptor", )
            AzureServiceBus(nhaisInboundQueue, "NHAIS Outbound Queue", "Internal to Adaptor", )
            AzureServiceBus(nhaisQueue, "GP System Inbound Queue ", "Consumed by GP System", )
        }
        rectangle "Lab Results Queues" {
            AzureServiceBus(lrInboundMesh, "Inbound MESH Queue", "Consumed by GP System")
            AzureServiceBus(lrOutboundMesh, "Outbound MESH Queue", "Consumed by Lab Results Adaptor")
            AzureServiceBus(lrInboundGp, "Inbound GP Queue", "Consumed by GP System")
            AzureServiceBus(lrOutboundGp, "Outbound GP Queue", "Provided by GP System")
        }
        AzureServiceBus(pemQueue, "111 PEM Queue", "Consumed by GP System")
        AzureKeyVault(kv, "Key Vault", "Adaptor Secrets needed by AKS when deploying pods")
        AzureMonitor(monitor, "Logs/Events/Pod Metrics", "view Kubernetes logs, events, and pod metrics in real-time")
    }
}
System_Ext(nhs, "NHS Systems", "Spine, SDS, MESH, etc")
AzureContainerRegistry(dockerHub, "Docker Hub", "Adaptor Docker containers")
gp --down-> ingress
111 --down-> ingress
ingress --down-> outbound
ingress --down-> inbound
ingress --down-> pem
ingress --down-> labResults
ingress --down-> nhais
outbound ..down-> sds
outbound --left-> cosmos
outbound --down->ptlvn
nhais --down->ptlvn
inbound -> cosmos
inbound --down-> asb
nhais --left->cosmos
nhais --right-> nhaisOutboundQueue
nhais --right-> nhaisInboundQueue
nhais --right-> nhaisQueue
pem --> pemQueue
labResults --> lrOutboundMesh
labResults --> lrOutboundGp
labResults --> ptlvn
lrOutboundMesh --> ptlvn
sds --right-> redis
sds -> ptlvn
aks --up-> dockerHub
aks --> kv
ptlvn --up-> ingress
asb ..> gp
nhaisQueue ..> gp
pemQueue ..> gp
gp --> lrInboundGp
lrInboundGp ..> labResults
gp --> lrOutboundGp
aks --> monitor
ptlvn <--> nhs
labs --up--> nhs
@enduml
