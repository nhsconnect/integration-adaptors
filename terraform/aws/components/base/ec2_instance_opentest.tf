data "aws_ami" "base_linux" {
  most_recent      = true
  name_regex       = "^amzn2-ami-hvm-2.0*"
  owners           = ["137112412989"]

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
      name = "image-type"
      values = ["machine"]
  }

  filter {
      name = "is-public"
      values = ["true"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }
}

resource "aws_instance" "opentest" {
  availability_zone = local.availability_zones[0]
  ami = data.aws_ami.base_linux.id
  instance_type = "t2.micro"
  key_name = "kainos-dev"
  iam_instance_profile = "TerraformJumpboxRole"
  vpc_security_group_ids = [aws_security_group.opentest_sg.id]
  subnet_id = aws_subnet.public_subnet.id
  user_data = data.template_cloudinit_config.opentest_user_data.rendered
  associate_public_ip_address = true

  tags = merge(local.default_tags, {
     Name = "${local.resource_prefix}-opentest"
  })
}

data "template_file" "opentest_cloudinit_template" {
  template = file("${path.module}/files/opentest.sh")
  vars = {}
}

data "template_cloudinit_config" "opentest_user_data" {
  gzip = true
  base64_encode = true
  part {
    content_type = "text/x-shellscript"
    content = data.template_file.opentest_cloudinit_template.rendered
  }
}

resource "aws_security_group" "opentest_sg" {
  name = "${local.resource_prefix}-opentest_sg"
  description = "SG for controlling in and out of ${var.environment} OpenTest Instance"
  vpc_id = aws_vpc.base_vpc.id

  tags = merge(local.default_tags, {
    Name = "${local.resource_prefix}-opentest_sg"
  })
}

resource "aws_security_group_rule" "opentest_22_from_cidrs" {
  count = length(var.jumpbox_allowed_ssh) > 0 ? 1 : 0
  description = "Allow SSH connection from listed CIDRS"
  type = "ingress"
  from_port = 22
  to_port = 22
  protocol = "tcp"
  security_group_id = aws_security_group.opentest_sg.id
  cidr_blocks = var.jumpbox_allowed_ssh
}

resource "aws_security_group_rule" "opentest_22_internet" {
  description = "Allow opentest to connect everywhere on 22"
  type = "egress"
  from_port = 22
  to_port = 22
  protocol = "tcp"
  security_group_id = aws_security_group.opentest_sg.id
  cidr_blocks = ["0.0.0.0/0"]
}

# resource "aws_security_group_rule" "opentest_80_internet" {
#   description = "Allow opentest to connect to internet on 80"
#   type = "egress"
#   from_port = 80
#   to_port = 80
#   protocol = "tcp"
#   security_group_id = aws_security_group.opentest_sg.id
#   cidr_blocks = ["0.0.0.0/0"]
# }

resource "aws_security_group_rule" "opentest_443_internet" {
  description = "Allow opentest to connect to internet on 443"
  type = "egress"
  from_port = -1
  to_port = -1
  protocol = "tcp"
  security_group_id = aws_security_group.opentest_sg.id
  cidr_blocks = ["0.0.0.0/0"]
}

resource "aws_security_group_rule" "opentest_proxy_from_core" {
  description = "Allow Proxy connection from core_sg"
  type = "ingress"
  from_port = 3128
  to_port = 3128
  protocol = "tcp"
  security_group_id = aws_security_group.opentest_sg.id
  cidr_blocks = aws_security_group.core_sg.id
}

resource "aws_security_group_rule" "opentest_ldap_proxy_from_core" {
  description = "Allow LDAP Proxy connection from core_sg"
  type = "ingress"
  from_port = 389
  to_port = 389
  protocol = "tcp"
  security_group_id = aws_security_group.opentest_sg.id
  cidr_blocks = aws_security_group.core_sg.id
}
