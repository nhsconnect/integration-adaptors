import io
import logging
import os
from pathlib import Path

from fabric import task

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
logging.basicConfig(level=logging.INFO)


@task
def setup_ec2_openvpn_for_ecs_container(c):
    """
    Install and configure OpenVPN on an EC2 instance created by AWS ECS
    """
    # Install OpenVPN (note that Docker gets installed/setup by AWS ECS)
    c.sudo("yum install -y openvpn")
    logging.info("Installed OpenVPN")

    # Create up/down scripts
    for up_down in ["up.sh", "down.sh"]:
        c.put(str(Path(CURRENT_DIR) / f"openvpn-{up_down}"), remote=f"openvpn-{up_down}")
        c.run(f"sudo mv openvpn-{up_down} /etc/openvpn/{up_down}")
        c.sudo(f"chmod +x /etc/openvpn/{up_down}")

    # Add VPN config file
    vpn_conf_filename = "vpn-config.conf"
    vpn_conf_temp_filename = "vpn-config-first.conf"
    c.put(vpn_conf_filename, remote=vpn_conf_temp_filename)

    # Add up/down config to VPN config file
    extra_vpn_conf_filename = "additional-openvpn-config.conf"
    c.put(str(Path(CURRENT_DIR) / extra_vpn_conf_filename), remote=extra_vpn_conf_filename)
    c.run(
        fr'''printf '%s\n\n%s' "$(cat {extra_vpn_conf_filename})" "$(cat {vpn_conf_temp_filename})"'''
        f' > {vpn_conf_filename}'
    )
    c.sudo(f"mv {vpn_conf_filename} /etc/openvpn/{vpn_conf_filename}")

    logging.info("Configured OpenVPN")

    # Start OpenVPN
    c.sudo("service openvpn restart")
    logging.info("Started OpenVPN")

    # Start OpenVPN on server startup
    c.sudo("chkconfig --level 2345 openvpn on")
    logging.info("Set OpenVPN to be started on server startup")


@task
def setup_ec2_openvpn(c):
    """
    Install and configure OpenVPN on an EC2 instance running Amazon Linux 2 AMI
    """
    # Install OpenVPN
    c.sudo("amazon-linux-extras install -y epel")
    c.sudo("yum install -y openvpn")
    logging.info("Installed OpenVPN")

    # Create up/down scripts
    for up_down in ["up.sh", "down.sh"]:
        c.put(str(Path(CURRENT_DIR) / f"openvpn-{up_down}"), remote=f"openvpn-{up_down}")
        c.run(f"sudo mv openvpn-{up_down} /etc/openvpn/{up_down}")
        c.sudo(f"chmod +x /etc/openvpn/{up_down}")

    # Add VPN config file
    vpn_conf_filename = "vpn-config.conf"
    vpn_conf_temp_filename = "vpn-config-first.conf"
    c.put(vpn_conf_filename, remote=vpn_conf_temp_filename)

    # Add up/down config to VPN config file
    extra_vpn_conf_filename = "additional-openvpn-config.conf"
    c.put(str(Path(CURRENT_DIR) / extra_vpn_conf_filename), remote=extra_vpn_conf_filename)
    c.run(
        fr'''printf '%s\n\n%s' "$(cat {extra_vpn_conf_filename})" "$(cat {vpn_conf_temp_filename})"'''
        f' > {vpn_conf_filename}'
    )
    c.sudo(f"mv {vpn_conf_filename} /etc/openvpn/client/{vpn_conf_filename}")

    logging.info("Configured OpenVPN")

    # Start OpenVPN
    c.sudo("systemctl restart openvpn-client@vpn-config")
    logging.info("Started OpenVPN")

    # Start OpenVPN on server startup
    c.sudo("systemctl enable openvpn-client@vpn-config")
    logging.info("Set OpenVPN to be started on server startup")


@task(help={"mhs_inbound_load_balancer_url": "url of the MHS inbound load balancer to forward Spine messages to"})
def setup_haproxy(c, mhs_inbound_load_balancer_url):
    """
    Install and configure HAProxy to work as a passthrough proxy for:

    - passing inbound requests from Spine to MHS inbound
    - passing LDAP requests from MHS spine route lookup to SDS (Spine Directory Service)
    """
    c.run("wget -O haproxy-2.0.5.tgz http://www.haproxy.org/download/2.0/src/haproxy-2.0.5.tar.gz")
    logging.info("Downloaded HAProxy")

    c.sudo("yum install -y gcc systemd-devel.x86_64")
    c.run("tar xzvf haproxy-2.0.5.tgz")

    logging.info("Compiling HAProxy (with Systemd support)")
    c.run("make -C haproxy-2.0.5 TARGET=generic USE_SYSTEMD=1")
    logging.info("HAProxy compilation succeeded")

    c.sudo("make -C haproxy-2.0.5 install")
    c.run("make -C haproxy-2.0.5/contrib/systemd")
    c.sudo("cp haproxy-2.0.5/contrib/systemd/haproxy.service /etc/systemd/system/")
    logging.info("Installed HAProxy")

    haproxy_config = (Path(CURRENT_DIR) / "haproxy.cfg").read_text().replace("mhs-inbound-load-balancer-url",
                                                                             mhs_inbound_load_balancer_url)
    c.put(io.StringIO(haproxy_config), remote="haproxy.cfg")
    c.sudo("mkdir -p /etc/haproxy")
    c.run(f"sudo mv haproxy.cfg /etc/haproxy/haproxy.cfg")
    c.sudo("groupadd -f haproxy")
    c.sudo("id -u haproxy &>/dev/null || sudo useradd -M -g haproxy haproxy")
    c.sudo("usermod -L haproxy")
    c.sudo("chown -R haproxy:haproxy /etc/haproxy")
    c.sudo("mkdir -p /var/lib/haproxy")
    logging.info("Configured HAProxy")

    c.sudo("systemctl daemon-reload")
    c.sudo("systemctl restart haproxy.service")
    logging.info("Started HAProxy")

    c.sudo("systemctl enable haproxy.service")
    logging.info("Set HAProxy to be started on server startup")


@task
def setup_squid(c):
    """
    Install and configure Squid to act as a HTTP proxy for requests from MHS outbound to Spine
    """
    c.sudo("yum install -y squid")
    logging.info("Installed Squid")

    c.put(str(Path(CURRENT_DIR) / "squid.conf"), remote="squid.conf")
    c.run(f"sudo mv squid.conf /etc/squid/squid.conf")
    logging.info("Configured Squid")

    c.sudo("systemctl restart squid.service")
    logging.info("Started Squid")

    c.sudo("systemctl enable squid.service")
    logging.info("Set Squid to be started on server startup")
